var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "UserForm", function () {
  return UserForm;
});
class UserForm {
  constructor(parent) {
    this.parent = parent;
  }
  /*[key: string]: value: function that takes no arg and returns nothing*/
  eventsMap() {
    return {
      'click:button': this.onButtonClick
    };
  }
  onButtonClick() {
    console.log('hi');
  }
  template() {
    return `
      <div>
        <h1>User Form</h1>
        <input />
        <button>Click me</button>
      </div>
    `;
  }
  /*frament -> reference to all the html we are trying to get ready to be inserting into the DOM*/
  bindEvents(fragment) {
    const eventsMap = this.eventsMap();
    // iterate over key-values pairs
    for (let eventKey in eventsMap) {
      // destructure to get the 1st and 2nd value of the array
      const [eventName, selector] = eventKey.split(':');
      fragment.querySelectorAll(selector).forEach(element => {
        element.addEventListener(eventName, eventsMap[eventKey]);
      });
    }
  }
  render() {
    const templateElement = document.createElement('template');
    templateElement.innerHTML = this.template();
    this.bindEvents(templateElement.content);
    this.parent.append(templateElement.content);
  }
}
